// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	sync "sync"

	dotnet "github.com/miclip/dotnet-extensions/dotnet"
)

type FakeDotnetClient struct {
	PublishStub        func(string, string) ([]byte, error)
	publishMutex       sync.RWMutex
	publishArgsForCall []struct {
		arg1 string
		arg2 string
	}
	publishReturns struct {
		result1 []byte
		result2 error
	}
	publishReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	SimplePackStub        func(string, string, string, string) (string, error)
	simplePackMutex       sync.RWMutex
	simplePackArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}
	simplePackReturns struct {
		result1 string
		result2 error
	}
	simplePackReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDotnetClient) Publish(arg1 string, arg2 string) ([]byte, error) {
	fake.publishMutex.Lock()
	ret, specificReturn := fake.publishReturnsOnCall[len(fake.publishArgsForCall)]
	fake.publishArgsForCall = append(fake.publishArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("Publish", []interface{}{arg1, arg2})
	fake.publishMutex.Unlock()
	if fake.PublishStub != nil {
		return fake.PublishStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.publishReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDotnetClient) PublishCallCount() int {
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	return len(fake.publishArgsForCall)
}

func (fake *FakeDotnetClient) PublishCalls(stub func(string, string) ([]byte, error)) {
	fake.publishMutex.Lock()
	defer fake.publishMutex.Unlock()
	fake.PublishStub = stub
}

func (fake *FakeDotnetClient) PublishArgsForCall(i int) (string, string) {
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	argsForCall := fake.publishArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDotnetClient) PublishReturns(result1 []byte, result2 error) {
	fake.publishMutex.Lock()
	defer fake.publishMutex.Unlock()
	fake.PublishStub = nil
	fake.publishReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeDotnetClient) PublishReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.publishMutex.Lock()
	defer fake.publishMutex.Unlock()
	fake.PublishStub = nil
	if fake.publishReturnsOnCall == nil {
		fake.publishReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.publishReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeDotnetClient) SimplePack(arg1 string, arg2 string, arg3 string, arg4 string) (string, error) {
	fake.simplePackMutex.Lock()
	ret, specificReturn := fake.simplePackReturnsOnCall[len(fake.simplePackArgsForCall)]
	fake.simplePackArgsForCall = append(fake.simplePackArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("SimplePack", []interface{}{arg1, arg2, arg3, arg4})
	fake.simplePackMutex.Unlock()
	if fake.SimplePackStub != nil {
		return fake.SimplePackStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.simplePackReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDotnetClient) SimplePackCallCount() int {
	fake.simplePackMutex.RLock()
	defer fake.simplePackMutex.RUnlock()
	return len(fake.simplePackArgsForCall)
}

func (fake *FakeDotnetClient) SimplePackCalls(stub func(string, string, string, string) (string, error)) {
	fake.simplePackMutex.Lock()
	defer fake.simplePackMutex.Unlock()
	fake.SimplePackStub = stub
}

func (fake *FakeDotnetClient) SimplePackArgsForCall(i int) (string, string, string, string) {
	fake.simplePackMutex.RLock()
	defer fake.simplePackMutex.RUnlock()
	argsForCall := fake.simplePackArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeDotnetClient) SimplePackReturns(result1 string, result2 error) {
	fake.simplePackMutex.Lock()
	defer fake.simplePackMutex.Unlock()
	fake.SimplePackStub = nil
	fake.simplePackReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeDotnetClient) SimplePackReturnsOnCall(i int, result1 string, result2 error) {
	fake.simplePackMutex.Lock()
	defer fake.simplePackMutex.Unlock()
	fake.SimplePackStub = nil
	if fake.simplePackReturnsOnCall == nil {
		fake.simplePackReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.simplePackReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeDotnetClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	fake.simplePackMutex.RLock()
	defer fake.simplePackMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDotnetClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ dotnet.DotnetClient = new(FakeDotnetClient)
